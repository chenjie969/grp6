####1.配置根Logger
##设置优先级别，依次常用是DEBUG>INFO>WARN>ERROR 
##debug：显示debug、info、warn、error
##info：显示info、warn、error
##error：只error
##示例：log4j.rootLogger = [ level ] , appenderName1, appenderName2, …
#log4j.rootLogger=error,stdout,logfie
#
####2.配置日志信息输出目的地（appender）
###appender1:输出到控制台 
#log4j.appender.stdout=org.apache.log4j.ConsoleAppender
##指定日志信息的最低输出级别，默认为DEBUG
#log4j.appender.stdout.Threshold=info
##配置日志信息的输出格式（Layout）
#log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
##%p   输出优先级，即1 DEBUG，2 INFO，3 WARN，4 ERROR log4j只支持4级 
#log4j.appender.stdout.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} [%c]-[%4p] - %m%rn
#
#
###appender2:输出到一个文件且文件大小到达指定尺寸的时候产生一个新的文件
#log4j.appender.logfie= org.apache.log4j.RollingFileAppender
##指定日志信息的最低输出级别
#log4j.appender.logfie.Threshold=debug
##true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true
#log4j.appender.logfie.Append=true
##the absolute route of the log4j file
#log4j.appender.logfie.File =D://GRP_log.txt
##the size 后缀可以是KB, MB 或者GB 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到dbsaas_log.txt.1文件中。
#log4j.appender.logfie.MaxFileSize = 200KB
##指定可以产生的滚动文件的最大数，例如，设为2则可以产生logging.log4j.1，logging.log4j.2两个滚动文件和一个logging.log4j文件。
#log4j.appender.logfie.MaxBackupIndex = 2
##配置日志信息的输出格式（Layout）
#log4j.appender.logfie.layout = org.apache.log4j.PatternLayout
###设定以怎样的格式显示消息
##%p：输出日志信息的优先级 
##%d：输出日志时间点的日期或时间后面可以带格式   
##%c：输出日志信息所属的类目，通常就是所在类的全名  
##%m:：输出代码中指定的具体日志信息   
##%n：输出一个回车换行符，Windows平台为"rn"，Unix平台为"n"
##另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式,例如："-d"号表示日期左对齐
#log4j.appender.logfie.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} [%c]-[%4p] - %m%rn
#
##struts configuration...
##log4j.logger.org.apache.struts=ERROR 
## spring configuration...
#log4j.logger.org.springframework=ERROR 
## MyBatis logging configuration...
##log4j.logger.com.zjm.mapper=TRACE
#
##log4jdbc
#log4j.logger.jdbc.sqlonly=OFF
#log4j.logger.jdbc.sqltiming=INFO
#log4j.logger.jdbc.audit=OFF
#log4j.logger.jdbc.resultset=OFF
#log4j.logger.jdbc.connection=OFF


log4j.rootLogger=debug, stdout, R

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout

# Pattern to output the caller's file name and line number.
#log4j.appender.stdout.layout.ConversionPattern=[%d] %t (%F:%L) %-5p - %m%n


##appender2:输出到一个文件且文件大小到达指定尺寸的时候产生一个新的文件
#log4j.appender.logfie= org.apache.log4j.RollingFileAppender
#指定日志信息的最低输出级别
#log4j.appender.logfie.Threshold=debug
#true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true
#log4j.appender.logfie.Append=true
#the absolute route of the log4j file
#log4j.appender.logfie.File =E://GRP_log.txt
#the size 后缀可以是KB, MB 或者GB 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到dbsaas_log.txt.1文件中。
#log4j.appender.logfie.MaxFileSize = 200KB
#指定可以产生的滚动文件的最大数，例如，设为2则可以产生logging.log4j.1，logging.log4j.2两个滚动文件和一个logging.log4j文件。
#log4j.appender.logfie.MaxBackupIndex = 2
#配置日志信息的输出格式（Layout）
#log4j.appender.logfie.layout = org.apache.log4j.PatternLayout
##设定以怎样的格式显示消息
#%p：输出日志信息的优先级 
#%d：输出日志时间点的日期或时间后面可以带格式   
#%c：输出日志信息所属的类目，通常就是所在类的全名  
#%m:：输出代码中指定的具体日志信息   
#%n：输出一个回车换行符，Windows平台为"rn"，Unix平台为"n"
#另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式,例如："-d"号表示日期左对齐
log4j.appender.logfie.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} [%c]-[%4p] - %m%rn

log4j.appender.R.Encoding=UTF-8
log4j.appender.R=org.apache.log4j.DailyRollingFileAppender
log4j.appender.R.DatePattern='_'yyyy-MM-dd_HH'.log'
log4j.appender.R.File=E://logslogs//hbrt
log4j.appender.R.ImmediateFlush=true
log4j.appender.R.MaxFileSize=10000KB
# Keep one backup file
log4j.appender.R.MaxBackupIndex=20


log4j.appender.R.layout=org.apache.log4j.PatternLayout
log4j.appender.R.layout.ConversionPattern=[%d] %t %c (%F:%L) %-5p - %m%n

#log4j.category.com.rd=info
log4j.category.org.springframework=info
log4j.category.com.opensymphony=info
log4j.category.freemarker=info
log4j.category.com.mchange=info
#log4j.category.com.rt.quartz=info
log4j.category.org.quartz=info
log4j.category.org.hibernate=info
log4j.category.org.jboss=info
log4j.category.org.displaytag=info
log4j.category.org.apache.struts2.config=error

#log4j.appender.STDOUT.Threshold=trace
#log4j.category.org.hibernate.SQL=trace
#log4j.category.org.hibernate.type=trace


